# -*- coding: utf-8 -*-

# pylint: disable=R0904
# Disable too many public methods for test cases

"""
Test the vulnerability module.
"""

import unittest
import tempfile
import os

from scipy import asarray, allclose

from core_hazimp.jobs.vulnerability_model import VulnerabilityFunction, \
    VulnerabilitySet

def build_example():
    """Build an example xml file.
    
    If you call this remember to delete the file;  os.remove(filename).
    
    Returns:
        The name of the file
    """
    str1 = """<?xml version='1.0' encoding='utf-8'?>
<nrml xmlns="http://openquake.org/xmlns/nrml/0.4"
      xmlns:gml="http://www.opengis.net/gml">

    <vulnerabilityModel>
        <config/>

        <!-- for attributes assetCategory and lossCategory, classification from the
                 Taxonomy and Ontology working group is needed -->
        <discreteVulnerabilitySet vulnerabilitySetID="PAGER" assetCategory="population" lossCategory="fatalities">

            <IML IMT="MMI">5.00 7.00 10.00</IML>

            <discreteVulnerability vulnerabilityFunctionID="IR" probabilisticDistribution="LN">
                <lossRatio>0.00  0.01  0.36</lossRatio>
                <coefficientsVariation>0.30 0.30 0.30 </coefficientsVariation>
            </discreteVulnerability>

            <discreteVulnerability vulnerabilityFunctionID="PK" probabilisticDistribution="LN">
                <lossRatio>0.00 0.02  0.36</lossRatio>
                <coefficientsVariation>0.40 0.40 0.40 </coefficientsVariation>
            </discreteVulnerability>

        </discreteVulnerabilitySet>

        <discreteVulnerabilitySet vulnerabilitySetID="NPAGER" assetCategory="population" lossCategory="fatalities">

            <IML IMT="MMI">6.00 8.00 11.00</IML>

            <discreteVulnerability vulnerabilityFunctionID="AA" probabilisticDistribution="LN">
                <lossRatio>0.00 0.03 0.36</lossRatio>
                <coefficientsVariation>0.50 0.50 0.50</coefficientsVariation>
            </discreteVulnerability>

            <discreteVulnerability vulnerabilityFunctionID="BB" probabilisticDistribution="LN">
                <lossRatio>0.00 0.06 0.36</lossRatio>
                <coefficientsVariation>0.30 0.30 0.30</coefficientsVariation>
            </discreteVulnerability>

        </discreteVulnerabilitySet>

    </vulnerabilityModel>
</nrml>"""
    
    # Write a file to test
    f = tempfile.NamedTemporaryFile(suffix='.xml', 
                                    prefix='test_vuln_model',
                                    delete=False)
    f.write(str1)
    f.close()
    return f.name
    
class TestVulnerabilityFunction(unittest.TestCase):
    
    def setUp(self):
        pass
    
    def tearDown(self):
        pass
    
    def test_from_xml(self):
        filename = build_example()
        vuln_set = VulnerabilitySet.from_xml(filename)
        
        self.assertTrue(allclose(vuln_set.intensity_measure_level, 
                                 asarray([5.00, 7.00, 10.00])))
        self.assertEqual(vuln_set.intensity_measure_type, "MMI")
        self.assertEqual(vuln_set.vulnerability_set_id, "PAGER")
        self.assertEqual(vuln_set.asset_category, "population")
        self.assertEqual(vuln_set.loss_category, "fatalities")
        
        loss_rs = [asarray([0.0, 0.01, 0.36]),
                   asarray([0.0, 0.02, 0.36]),
                    asarray([0.0, 0.03, 0.36])]
        covs = [[0.3, 0.3, 0.3], [0.4, 0.4, 0.4], [0.5, 0.5, 0.5]]
        for (vul_funct, loss_r, cov) in zip(vuln_set.vulnerability_functions, 
                                         loss_rs, covs):
            
            self.assertTrue(allclose(vul_funct.mean_loss_ratio, loss_r))
        
        
        os.remove(filename)
    
    def Xtest_calc_mean(self):
        func = VulnerabilityFunction('test',
                                      self.mean_values,
                                      self.cv_values,
                                      distribution='N')
        
        (mean, sigma) = func.calc_mean(7, self.mmi_values)
        self.assertEqual(0.5, mean, 
                         'mean=%s is not equal to expected 0.5' % mean)
        self.assertEqual(0.5, sigma, 
                         'sigma=%s is not equal to expected 0.5' % mean)
    
   

#-------------------------------------------------------------
if __name__ == "__main__":
    SUITE = unittest.makeSuite(TestVulnerabilityFunction,'test')
    RUNNER = unittest.TextTestRunner()
    RUNNER.run(SUITE)
    
